{
	"info": {
		"_postman_id": "950a750a-89cd-4141-9268-6ccff15414af",
		"name": "swapi",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "https://swapi.dev/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "45444bf8-ef70-4974-875e-73e053fca52d",
						"exec": [
							"//1.Correct response format JSON\r",
							"pm.test(\"Correct response format JSON\", function() {\r",
							"    pm.response.to.have.jsonBody()\r",
							"})\r",
							"//2.Response contains all declared fields\r",
							"pm.test(\"Response contains all declared fields\", function() {\r",
							"const jsonData = pm.response.json();\r",
							"pm.expect(jsonData).to.have.property(\"people\");\r",
							"pm.expect(jsonData).to.have.property(\"planets\");\r",
							"pm.expect(jsonData).to.have.property(\"films\");\r",
							"pm.expect(jsonData).to.have.property(\"species\");\r",
							"pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"pm.expect(jsonData).to.have.property(\"starships\");\r",
							"})\r",
							"//3.Field value is not null\r",
							"pm.test(\"Field value is not null\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.eql(null);\r",
							"    pm.expect(jsonData.planets).not.eql(null);\r",
							"    pm.expect(jsonData.films).not.eql(null);\r",
							"    pm.expect(jsonData.species).not.eql(null);\r",
							"    pm.expect(jsonData.vehicles).not.eql(null);\r",
							"    pm.expect(jsonData.starships).not.eql(null);\r",
							"})\r",
							"//4.Field value is not empty\r",
							"pm.test(\"Field value is not empty\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.eql(\"\");\r",
							"    pm.expect(jsonData.planets).not.eql(\"\");\r",
							"    pm.expect(jsonData.films).not.eql(\"\");\r",
							"    pm.expect(jsonData.species).not.eql(\"\");\r",
							"    pm.expect(jsonData.vehicles).not.eql(\"\");\r",
							"    pm.expect(jsonData.starships).not.eql(\"\");\r",
							"})\r",
							"//5.Field values corresponds to specification\r",
							"pm.test(\"Field values corresponds to specification\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).eql(\"http://swapi.dev/api/people/\");\r",
							"    pm.expect(jsonData.planets).eql(\"http://swapi.dev/api/planets/\");\r",
							"    pm.expect(jsonData.films).eql(\"http://swapi.dev/api/films/\");\r",
							"    pm.expect(jsonData.species).eql(\"http://swapi.dev/api/species/\");\r",
							"    pm.expect(jsonData.vehicles).eql(\"http://swapi.dev/api/vehicles/\");\r",
							"    pm.expect(jsonData.starships).eql(\"http://swapi.dev/api/starships/\");\r",
							"})\r",
							"//6.Status code is 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"//7.Massage is OK\r",
							"pm.test(\"Massage is OK\", function() {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"})\r",
							"//8.Time request is less than 1000ms\r",
							"pm.test(\"Time request is less than 1000ms\", function() {\r",
							"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"})\r",
							"//9.Response contains header Content-Type\r",
							"pm.test(\"Response contains header Content-Type\", function() {\r",
							"pm.response.to.have.header(\"Content-Type\");\r",
							"})\r",
							"//10.The header has specific value\r",
							"pm.test(\"The header has specific value\", function() {\r",
							"pm.response.to.be.header(\"Content-Type\", \"application/json\");\r",
							"})\r",
							"//11.Check that response contains cookies\r",
							"pm.test(\"Check that response contains cookies\", function() {\r",
							"    pm.cookies.has(null);\r",
							"})\r",
							"//12.Check that coockies have value\r",
							"pm.test(\"Check that coockies have value\", function() {\r",
							"     try{\r",
							"        var COOKIES= pm.cookies.get(\"aa\");\r",
							"         console.log(COOKIES);\r",
							"     }\r",
							"     catch(e) {\r",
							"         console.log(\"No cookies, man\"+e);\r",
							"     }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6c4b857e-8ce7-4803-9462-e527b0730cca",
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"var schema = {\"type\": \"object\",\r",
							"              \"required\": [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"              \"properties\": {\r",
							"                  \"people\": {\"type\": \"string\"},\r",
							"                  \"planets\": {\"type\": \"string\"},\r",
							"                  \"films\": {\"type\": \"string\"},\r",
							"                  \"species\": {\"type\": \"string\"},\r",
							"                  \"vehicles\": {\"type\": \"string\"},\r",
							"                  \"starships\": {\"type\": \"string\"},\r",
							"                  \r",
							"              }\r",
							"}\r",
							"pm.test(\"Schema is valid\", function() {\r",
							"pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/people/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aee186ba-a522-49d0-8094-ad3b5b51ea00",
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"var schema = {\r",
							"    \"type\":\"object\",\r",
							"    \"required\": [\"name\", \"hair_color\"],\r",
							"    \"property\": {\r",
							"                \"films\": {\"type\": \"array\",\r",
							"                          \"items\": {\"type\": \"string\"}\r",
							"                         },\r",
							"                \"species\": {\"type\": \"array\"\r",
							"                           },\r",
							"                \"vehicles\": {\"type\": \"array\",\r",
							"                             \"items\": {\"type\": \"string\"}\r",
							"                            }\r",
							"    }\r",
							"}\r",
							"pm.test(\"Validate schema\", function(){\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://5cc43bf6-125c-4477-b911-3103da65085f.mock.pstmn.io",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://5cc43bf6-125c-4477-b911-3103da65085f.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"5cc43bf6-125c-4477-b911-3103da65085f",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://5cc43bf6-125c-4477-b911-3103da65085f.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "key",
									"value": "value",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://5cc43bf6-125c-4477-b911-3103da65085f.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"5cc43bf6-125c-4477-b911-3103da65085f",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 29 Aug 2020 11:43:50 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=99458fc65c3dbefa"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=c31106d8a6e759cb"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1598701490"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"Success\"\n    }\n}"
				}
			]
		},
		{
			"name": "https://5cc43bf6-125c-4477-b911-3103da65085f.mock.pstmn.io",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://5cc43bf6-125c-4477-b911-3103da65085f.mock.pstmn.io?key=value",
					"protocol": "https",
					"host": [
						"5cc43bf6-125c-4477-b911-3103da65085f",
						"mock",
						"pstmn",
						"io"
					],
					"query": [
						{
							"key": "key",
							"value": "value"
						}
					]
				}
			},
			"response": [
				{
					"name": "https://5cc43bf6-125c-4477-b911-3103da65085f.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "key",
									"value": "value",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://5cc43bf6-125c-4477-b911-3103da65085f.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"5cc43bf6-125c-4477-b911-3103da65085f",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 29 Aug 2020 11:43:50 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=99458fc65c3dbefa"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=c31106d8a6e759cb"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1598701490"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"post\",\n        \"message\": \"Success\"\n    }\n}"
				},
				{
					"name": "https://5cc43bf6-125c-4477-b911-3103da65085f.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://5cc43bf6-125c-4477-b911-3103da65085f.mock.pstmn.io?key=value",
							"protocol": "https",
							"host": [
								"5cc43bf6-125c-4477-b911-3103da65085f",
								"mock",
								"pstmn",
								"io"
							],
							"query": [
								{
									"key": "key",
									"value": "value"
								}
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 29 Aug 2020 11:43:50 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=99458fc65c3dbefa"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=c31106d8a6e759cb"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1598701490"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\"\n    }\n}"
				}
			]
		},
		{
			"name": "https://5cc43bf6-125c-4477-b911-3103da65085f.mock.pstmn.io",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://5cc43bf6-125c-4477-b911-3103da65085f.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"5cc43bf6-125c-4477-b911-3103da65085f",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://5cc43bf6-125c-4477-b911-3103da65085f.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "key",
									"value": "value",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://5cc43bf6-125c-4477-b911-3103da65085f.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"5cc43bf6-125c-4477-b911-3103da65085f",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Sat, 29 Aug 2020 11:43:50 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=99458fc65c3dbefa"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=c31106d8a6e759cb"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1598701490"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test1\",\n        \"message\": \"Success\"\n    }\n}"
				}
			]
		}
	],
	"protocolProfileBehavior": {}
}